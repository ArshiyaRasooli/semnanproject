# -*- coding: utf-8 -*-
"""رونوشت CT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YMQ9fnb2BbvLSef0NIyn9ljthlqKzGrO
"""

from google.colab import drive
drive.mount('/content/drive')

pip install catboost

from tables import utils
from glob import glob
import cv2
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix, f1_score, precision_score, recall_score, roc_curve, auc

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from xgboost import XGBClassifier
import xgboost as xgb

import tensorflow.keras.layers as L
from tensorflow import keras
import scipy, sklearn
import tensorflow as tf

images_path = {}
images_path["covid"] = glob("/content/drive/MyDrive/CT/COVID/*.png")
images_path["non-Covid"] = glob("/content/drive/MyDrive/CT/non-COVID/*.png")
images_class = {
    'covid' : 0,
    'non-Covid' : 1
}

print(images_path)

X = []
Y = []

for label in images_path:
    for image_path in images_path[label]:
        image = cv2.imread(image_path)
        image = cv2.resize(image,(224, 224))
        X.append(image)
        Y.append(images_class[label])

plt.imshow(X[0])
plt.show()

x = np.array(X)
y = np.array(Y)

pre_trained_models = {}

from keras.applications.densenet import DenseNet201
pre_trained_models["DenseNet201"] = DenseNet201(include_top=False, input_shape=(224, 224, 3), pooling="avg")

from keras.applications.vgg19 import VGG19
pre_trained_models["VGG19"] = VGG19(include_top=False, input_shape=(224, 224, 3), pooling="avg")

for j in pre_trained_models.keys():
  for layer in pre_trained_models[j].layers:
    layer.trainable = False

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.3, random_state=0)
X_train1 = pre_trained_models["DenseNet201"].predict(X_train)
X_test1 = pre_trained_models["DenseNet201"].predict(X_test)

X_train2 = pre_trained_models["VGG19"].predict(X_train)
X_test2 = pre_trained_models["VGG19"].predict(X_test)

X_train = np.append(X_train1, X_train2, axis=1)
X_test = np.append(X_test1,X_test2, axis=1)

from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier
Classifier = XGBClassifier(learning_rate = 0.2, n_estimators = 150, random_state= 0, gamma= 0, seed=0, depth = 7, silent = True)
Classifier.fit(X_train, Y_train)

Y_pred = Classifier.predict(X_test)
print(accuracy_score(Y_test, Y_pred))

print("Accuracy score : ", accuracy_score(Y_test, Y_pred))
print("mean_squared_error : ", mean_squared_error(Y_test, Y_pred))
print("r2_score : ", r2_score(Y_test, Y_pred))
print("f1_score : ", f1_score(Y_test, Y_pred))
print("precision_score: ", precision_score(Y_test, Y_pred))
print("recall_score : ", recall_score(Y_test, Y_pred))

from sklearn import metrics

cm = metrics.confusion_matrix(Y_test, Y_pred)

cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cm)

cm_display.plot()
plt.show()

from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt 

fp_rate3, tp_rate3, trsh3 = roc_curve(Y_test, Y_pred)
plt.plot(fp_rate3, tp_rate3)
plt.plot([0, 1], ls='--')
plt.plot([0,0], [1, 0], c = '0.7')
plt.plot([1, 1], c = '0.7')
plt.ylabel("true_positive")
plt.xlabel("false_positive")
plt.show()